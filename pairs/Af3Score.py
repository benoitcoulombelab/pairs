import argparse
import glob
import json
import os
import re
import sys
from typing import TextIO

import tqdm


class Confidence:
  def __init__(self, iptm: float,
      ptm: float, ranking_score: float):
    self.iptm = iptm
    self.ptm = ptm
    self.ranking_score = ranking_score


def dir_path(string: str):
  if not string or os.path.isdir(string):
    return string
  else:
    raise NotADirectoryError(string)


METRICS = ["iptm", "ptm", "ranking_score"]


def main(argv: list[str] = None):
  parser = argparse.ArgumentParser(
      description="Extract ipTM score (or other) from summary confidence JSON files generated by AlphaFold 3.")
  parser.add_argument('-i', '--input', type=dir_path, default="",
                      help="Base directory to look for summary confidence JSON files  (default: current directory)")
  parser.add_argument('-o', '--output', type=argparse.FileType('w'),
                      default=sys.stdout,
                      help="Tab delimited output file containing scores")
  parser.add_argument('-m', '--metrics', nargs="+", choices=METRICS,
                      default=[METRICS[0]],
                      help="Metrics to output  (default: %(default)s)")
  parser.add_argument('-n', '--name',
                      default=r"([\w-]+)__([\w-]+)_summary_confidences",
                      help="Regular expression to obtain protein/gene names based on confidence filename "
                           " (default: %(default)s)")
  parser.add_argument('-p', '--progress', action="store_true", default=False,
                      help="Show progress bar")
  parser.add_argument('-M', '--mapping', type=argparse.FileType('r'),
                      help="Tab delimited text file used to convert names")
  parser.add_argument('-S', '--source_column', type=int, default='1',
                      help="Column index of source names in mapping file - 1 means first column of file" +
                           "   (default: %(default)s)")
  parser.add_argument('-C', '--converted_column', type=int, default='2',
                      help="Column index of converted names in mapping file - 1 means first column of file" +
                           "   (default: %(default)s)")

  args = parser.parse_args(argv)

  af3_score(input_dir=args.input, output_file=args.output,
            name=args.name,
            metrics=args.metrics, progress=args.progress,
            mapping_file=args.mapping,
            source_column=args.source_column - 1,
            converted_column=args.converted_column - 1)


def af3_score(input_dir: str = "",
    output_file: TextIO = sys.stdout, name: str = r"([\w-]+)__([\w-]+)",
    metrics: [str] = [METRICS[0]], progress: bool = False,
    mapping_file: TextIO = None, source_column: int = 0,
    converted_column: int = 1):
  """
  Extract ipTM score (or other) from summary confidence JSON files generated by AlphaFold 3.

  :param input_dir: input directory
  :param output_file: output file
  :param name: regular expression to obtain protein/gene names based on confidence filename
  :param metrics: metrics to output
  :param progress: if True, show progress bar
  :param mapping_file: tab delimited text file used to convert names
  :param source_column: column index of source names in mapping file
  :param converted_column: column index of converted names in mapping file
  """
  if len(metrics) == 0:
    raise AssertionError("metrics must have at least one value")
  if len([metric for metric in metrics if metric not in METRICS]) > 0:
    raise AssertionError(
        f"metrics values must all be present in {METRICS}")
  confidence_files = sorted(
      glob.glob("**/*_summary_confidences.json", root_dir=input_dir,
                recursive=True))
  confidence_files = [os.path.join(input_dir, confidence_file) for
                      confidence_file in confidence_files]
  mappings = {}
  if mapping_file:
    mappings = parse_mapping(mapping_file, source_column, converted_column)
  output_file.write("Bait\tTarget")
  for metric in metrics:
    if "iptm" == metric:
      output_file.write("\tipTM")
    elif "ptm" == metric:
      output_file.write("\tpTM")
    elif "ranking_score" == metric:
      output_file.write("\tRanking score")
  output_file.write("\n")
  for confidence_file in (
      tqdm.tqdm(confidence_files) if progress else confidence_files):
    re_match = re.search(name, confidence_file)
    if not re_match:
      raise AssertionError(
          f"Expression {name} cannot be found in filename {confidence_file}")
    bait, target = re_match.group(1, 2)
    bait = mappings[bait] if bait in mappings else bait
    target = mappings[target] if target in mappings else target
    output_file.write(f"{bait}\t{target}")
    confidence = parse_confidence(confidence_file)
    for metric in metrics:
      if "iptm" == metric:
        output_file.write(f"\t{confidence.iptm}")
      elif "ptm" == metric:
        output_file.write(f"\t{confidence.ptm}")
      elif "ranking_score" == metric:
        output_file.write(f"\t{confidence.ranking_score}")
    output_file.write("\n")


def parse_confidence(confidence_file: str) -> Confidence:
  """
  Parses confidence scores.

  :param confidence_file: summary confidence JSON file
  :return: confidence
  """
  with open(confidence_file, 'r') as input_in:
    confidences = json.load(input_in)
  if METRICS[0] not in confidences:
    raise AssertionError(
        f"metric {METRICS[0]} not found in confidence JSON file {confidence_file}")
  iptm = confidences["iptm"]
  ptm = confidences["ptm"]
  ranking_score = confidences["ranking_score"]
  return Confidence(iptm, ptm,
                    ranking_score)


def parse_mapping(mapping_file: TextIO, source_column: int = 0,
    converted_column: int = 1) \
    -> dict[str, str]:
  """
  Parse mapping file.

  :param mapping_file: text delimited filename
  :param source_column: index of source id columns
  :param converted_column: index of converted id columns
  :return: dictionary of source id to converted id
  """
  mappings = {}
  for line in mapping_file:
    if line.startswith('#'):
      continue
    columns = line.rstrip('\r\n').split('\t')
    source = columns[source_column]
    converted = columns[converted_column]
    if converted:
      mappings[source] = converted
  return mappings


if __name__ == '__main__':
  main()
